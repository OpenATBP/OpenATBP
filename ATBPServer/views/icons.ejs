<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Icon Shop</title>
    <link rel="stylesheet" href="/css/icon-shop.css">
</head>

<body>
<div class="main-content-wrapper">
    <div id="user-info">
        <img src="assets/pfp/Default.jpg" id="current-user-icon" class="rarity-common" alt="Current User Icon">
        <p id="username"><%= userInfo.user.dname; %></p>
        <div id="stats-row">
            <p id="player-level"><%= userInfo.player.rank || '1'; %></p>
            <img src="assets/ranks/1-0.png" id="rank" alt="Rank">
            <div class="coin-display">
                <img src="assets/icon_shop/coin.png" alt="Coins" id="coins-img">
                <p id="coins"></p>
            </div>
        </div>
        <div id="user-info2">
            <p id="stat-playsPVP"><%= userInfo.player.playsPVP || '0'; %></p>
            <p id="stat-winsPVP"><%= userInfo.player.winsPVP || '0'; %></p>
            <p id="stat-kills"><%= userInfo.player.kills || '0'; %></p>
            <p id="stat-largestSpree"><%= userInfo.player.largestSpree || '0'; %></p>
            <p id="stat-largestMulti"><%= userInfo.player.largestMulti || '0'; %></p>
        </div>
        <button id="return-to-game-button" onclick="location.href='/'">Return to Game</button>
    </div>
    <div id="icon-details" class="is-empty">
        <h2 id="details-icon-heading"></h2>
        <img id="details-icon-img" src="" alt="">
        <h3 id="details-icon-name">Select an Icon</h3>
        <p id="details-icon-rarity"></p>
        <div id="details-actions"></div>
    </div>
    <div id="icon-grid"></div>
</div>

<script>
  var currentlySelectedIconDiv = null;
  var userInfo = '<%- JSON.stringify(userInfo) %>';
  var allIconsData = '<%- JSON.stringify(allIconsData) %>';

  var currentUserData = JSON.parse(userInfo);
  var runtimeIconData = JSON.parse(allIconsData);

  function getRarityClass(rarityName) {
    if (!rarityName) return 'rarity-common';
    var rarity = rarityName.toLowerCase().replace(/\s+/g, '-');
    return 'rarity-' + rarity;
  }

  function populateIconGrid(iconData, gridElement) {
    if (!gridElement) return;
    gridElement.innerHTML = '';
    for (var iconName in iconData) {
      var data = iconData[iconName];
      var iconDiv = document.createElement('div');
      iconDiv.classList.add('icon');
      iconDiv.dataset.iconName = iconName;
      var img = document.createElement('img');
      img.src = data.src;
      img.alt = 'icon ' + iconName;
      iconDiv.appendChild(img);
      gridElement.appendChild(iconDiv);
    }
  }

  function applyInitialVisualState(iconData, gridElement) {
    if (!gridElement) return;
    var allIconDivs = gridElement.querySelectorAll('.icon');


    for (var i = 0; i < allIconDivs.length; i++) {
      var iconDiv = allIconDivs[i];

      var iconName = iconDiv.dataset.iconName;
      if (!iconName || !iconData[iconName]) {
        console.warn("Missing data or name for icon div:", iconDiv);
        iconDiv.classList.add('rarity-common');
        iconDiv.dataset.owned = "false";
        continue;
      }
      var data = iconData[iconName];
      var rarityName = data.rarity || 'Common';
      var isOwned = data.owned;
      var rarityClass = getRarityClass(rarityName);

      iconDiv.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
      iconDiv.classList.add(rarityClass);
      var existingIndicator = iconDiv.querySelector('.rarity-indicator');
      if (existingIndicator) iconDiv.removeChild(existingIndicator);

      var indicatorvarter = rarityName === 'Common' ? 'C' : rarityName === 'Blooby' ? 'B' : rarityName === 'Algebraic' ? 'A' : rarityName === 'Legendary' ? 'L' : '?';
      var indicatorSpan = document.createElement('span');
      indicatorSpan.className = 'rarity-indicator';
      indicatorSpan.textContent = indicatorvarter;
      iconDiv.appendChild(indicatorSpan);
      iconDiv.dataset.owned = isOwned ? "true" : "false";

    }
  }

  function getRankImage(elo) {
    // Tier 4: Immortal Warrior (Starts at 200)
    if (elo > 439) return 'assets/ranks/4-4.png'; // Purple (440+)
    else if (elo > 379) return 'assets/ranks/4-3.png'; // Teal (380-439)
    else if (elo > 319) return 'assets/ranks/4-2.png'; // Gold (320-379)
    else if (elo > 259) return 'assets/ranks/4-1.png'; // Silver (260-319)
    else if (elo > 199) return 'assets/ranks/4-0.png'; // Bronze (200-259)

    // Tier 3: Master of Battle (Starts at 75)
    else if (elo > 167) return 'assets/ranks/3-3.png'; // Tier 3d (168-199)
    else if (elo > 136) return 'assets/ranks/3-2.png'; // Tier 3c (137-167)
    else if (elo > 105) return 'assets/ranks/3-1.png'; // Tier 3b (106-136)
    else if (elo > 74) return 'assets/ranks/3-0.png';  // Tier 3a (75-105)

    // Tier 2: Royal Legend (Starts at 25)
    else if (elo > 56) return 'assets/ranks/2-2.png';  // Tier 2c (57-74)
    else if (elo > 40) return 'assets/ranks/2-1.png';  // Tier 2b (41-56)
    else if (elo > 24) return 'assets/ranks/2-0.png';  // Tier 2a (25-40)

    // Tier 1: Brave Hero (Starts at 0)
    else if (elo > 11) return 'assets/ranks/1-1.png';
    else return 'assets/ranks/1-0.png';
  }

  function updateUserInfoPanel(userData, localRuntimeIconData, elements) {
    var usernameEl = elements.usernameEl;
    var coinsEl = elements.coinsEl;
    var playerLevelEl = elements.playerLevelEl;
    var rankImgEl = elements.rankImgEl;
    var currentUserIcon = elements.currentUserIcon;
    var statPlaysPVPEl = elements.statPlaysPVPEl;
    var statWinsPVPEl = elements.statWinsPVPEl;
    var statKillsEl = elements.statKillsEl;
    var statLargestSpreeEl = elements.statLargestSpreeEl;
    var statLargestMultiEl = elements.statLargestMultiEl;


    if (usernameEl) usernameEl.textContent = userData.user.dname || 'Player';
    if (coinsEl) coinsEl.textContent = userData.player.coins.toLocaleString() || '0';
    if (playerLevelEl) playerLevelEl.textContent = userData.player.rank || '1';

    var elo = userData.player.elo || 0;
    var rankImage = getRankImage(elo);
    var alt = "Unknown";
    var slashIndex = rankImage.lastIndexOf('/');
    var dotIndex = rankImage.lastIndexOf('.png');
    if (slashIndex !== -1 && dotIndex !== -1 && dotIndex > slashIndex) {
      alt = rankImage.slice(slashIndex + 1, dotIndex);
    }
    if (rankImgEl) {
      rankImgEl.src = rankImage;
      rankImgEl.alt = 'Rank ' + alt;
    }

    var currentIconName = userData.user.pfp || 'Default';
    var currentIconPath = 'assets/pfp/' + currentIconName + '.jpg';
    var currentIconRarityName = 'Common';
    var currentIconKey = currentIconName;

    if (localRuntimeIconData[currentIconName]) {
      currentIconRarityName = localRuntimeIconData[currentIconName].rarity || 'Common';
    } else if (currentIconName !== 'Default') {
      console.warn('Could not find metadata for current PFP: ' + currentIconName);
    }

    var currentRarityClass = getRarityClass(currentIconRarityName);
    if (currentUserIcon) {
      currentUserIcon.src = currentIconPath;
      currentUserIcon.onerror = function() {
        console.warn('Icon image not found: ' + currentIconPath + ',' + 'using default');
        currentUserIcon.src = 'icon_shop/user-icons/Default.jpg';
        currentUserIcon.alt = 'Current Icon: Default';
        currentUserIcon.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
        currentUserIcon.classList.add('rarity-common');
      };
      currentUserIcon.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
      currentUserIcon.classList.add(currentRarityClass);
      currentUserIcon.alt = 'Current Icon: ' + currentIconKey;
    }

    var rankedPlaysValue = userData.player.playsPVP || '0';
    var winsPVPValue = userData.player.winsPVP || '0';
    var killsValue = userData.player.kills || '0';
    var largestSpreeValue = userData.player.largestSpree || '0';
    var largestMultiValue = userData.player.largestMulti || '0';

    if (statPlaysPVPEl) statPlaysPVPEl.textContent = 'Ranked Plays: ' + rankedPlaysValue;
    if (statWinsPVPEl) statWinsPVPEl.textContent = 'Ranked Wins: ' + winsPVPValue;
    if (statKillsEl) statKillsEl.textContent = 'Total KOs: ' + killsValue;
    if (statLargestSpreeEl) statLargestSpreeEl.textContent = 'Largest KO Spree: ' + largestSpreeValue;
    if (statLargestMultiEl) statLargestMultiEl.textContent = 'Largest Multi-KO: ' + largestMultiValue;
  }

  function clearDetailsPanel(elements) {
    var iconDetailsSection = elements.iconDetailsSection;
    var detailsIconImg = elements.detailsIconImg;
    var detailsIconName = elements.detailsIconName;
    var detailsIconRarity = elements.detailsIconRarity;
    var detailsActionsContainer = elements.detailsActionsContainer;
    var detailsHeading = elements.detailsHeading;

    if (!iconDetailsSection) return;
    iconDetailsSection.classList.add('is-empty');
    if (detailsIconImg) {
      detailsIconImg.src = "";
      detailsIconImg.alt = "";
      detailsIconImg.className = '';
      detailsIconImg.style.borderColor = '';
    }
    if (detailsIconName) detailsIconName.textContent = "Select an Icon";
    if (detailsIconRarity) {
      detailsIconRarity.textContent = "";
      detailsIconRarity.className = '';
      detailsIconRarity.style.display = 'none';
    }
    if (detailsActionsContainer) detailsActionsContainer.innerHTML = '';
    if (detailsHeading) detailsHeading.textContent = '';

  }

  function handleUseIcon(iconName, iconData, elements) {

    var currentUserIcon = elements.currentUserIcon;
    var useButton = document.getElementById('details-use-button');


    if (useButton) {
      useButton.disabled = true;
    }

    fetch('/icons/use', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: currentUserData._id, iconName: iconName })
    })
      .then(function(response) {
        if (!response.ok) {

          return response.json().catch(function() {
            throw new Error('Server error: ' + response.status);
          }).then(function(errorData) {
            throw new Error(errorData.message || 'Server error: ' + response.status);
          });
        }
        return response.json();
      })
      .then(function(result) {

        if (currentUserIcon && iconData) {

          currentUserIcon.src = iconData.src;
          currentUserIcon.alt = 'Current Icon: ' + iconName;
          var currentRarityClass = getRarityClass(iconData.rarity);
          currentUserIcon.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
          currentUserIcon.classList.add(currentRarityClass);
        }


        if (currentUserData && currentUserData.user) {
          currentUserData.user.pfp = iconName;
        }


        var detailsActionsContainer = document.getElementById('details-actions');
        if (detailsActionsContainer) {
          detailsActionsContainer.innerHTML = '';
          var unequipButton = document.createElement('button');
          unequipButton.id = 'details-unequip-button';
          unequipButton.textContent = 'Unequip';
          unequipButton.addEventListener('click', function() {
            handleUnequipIcon(iconName, elements);
          });
          detailsActionsContainer.appendChild(unequipButton);
        }


      })
      .catch(function(error) {
        console.error('Failed to set icon:', error);
        alert('Failed to set icon: ' + error.message);


        if (useButton) {
          useButton.disabled = false;
          useButton.textContent = 'Use Icon';
        }
      });
  }


  function handleUnequipIcon(iconName, elements) {
    var unequipButton = document.getElementById('details-unequip-button');


    if (unequipButton) {
      unequipButton.disabled = true;
      unequipButton.textContent = 'Unequipping...';
    }


    fetch('/icons/use', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: currentUserData._id, iconName: "Default" })
    })
      .then(function(response) {
        if (!response.ok) {
          return response.json().catch(function() {
            throw new Error('Server error: ' + response.status);
          }).then(function(errorData) {
            throw new Error(errorData.message || 'Server error: ' + response.status);
          });
        }
        return response.json();
      })
      .then(function(result) {


        if (currentUserData && currentUserData.user) {
          currentUserData.user.pfp = "Default";
        }


        var defaultIconData = { src: 'assets/pfp/Default.jpg', rarity: 'Common' };
        if (elements.currentUserIcon) {
          elements.currentUserIcon.src = defaultIconData.src;
          elements.currentUserIcon.alt = 'Current Icon: Default';
          var defaultRarityClass = getRarityClass(defaultIconData.rarity);
          elements.currentUserIcon.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
          elements.currentUserIcon.classList.add(defaultRarityClass);
        }


        var detailsActionsContainer = document.getElementById('details-actions');
        if (detailsActionsContainer) {
          detailsActionsContainer.innerHTML = '';
          var useButton = document.createElement('button');
          useButton.id = 'details-use-button';
          useButton.textContent = 'Use Icon';


          var originalIconData = runtimeIconData[iconName];
          useButton.addEventListener('click', function() {

            handleUseIcon(iconName, originalIconData, elements);
          });
          detailsActionsContainer.appendChild(useButton);
        }


      })
      .catch(function(error) {
        console.error('Failed to unequip icon:', error);
        alert('Failed to unequip icon: ' + error.message);


        if (unequipButton) {
          unequipButton.disabled = false;
          unequipButton.textContent = 'Unequip';
        }
      });
  }


  document.addEventListener('DOMContentLoaded', function() {

    var elements = {
      iconGrid: document.getElementById('icon-grid'),
      iconDetailsSection: document.getElementById('icon-details'),
      detailsIconImg: document.getElementById('details-icon-img'),
      detailsHeading: document.getElementById('details-heading'),
      detailsIconName: document.getElementById('details-icon-name'),
      detailsIconRarity: document.getElementById('details-icon-rarity'),
      detailsActionsContainer: document.getElementById('details-actions'),
      currentUserIcon: document.getElementById('current-user-icon'),
      usernameEl: document.getElementById('username'),
      playerLevelEl: document.getElementById('player-level'),
      rankImgEl: document.getElementById('rank'),
      coinsEl: document.getElementById('coins'),
      statPlaysPVPEl: document.getElementById('stat-playsPVP'),
      statWinsPVPEl: document.getElementById('stat-winsPVP'),
      statKillsEl: document.getElementById('stat-kills'),
      statLargestSpreeEl: document.getElementById('stat-largestSpree'),
      statLargestMultiEl: document.getElementById('stat-largestMulti'),
      userInfoPanel: document.getElementById('user-info')
    };


    if (!elements.iconGrid || !elements.iconDetailsSection || !elements.usernameEl) {
      console.error("Crucial UI elements not found! Aborting initialization.");
      document.body.innerHTML = '<p style="color: red; text-align: center;">Error loading page components.</p>';
      return;
    }

    try {

      if (!currentUserData || !runtimeIconData) {
        console.error("User or Icon data not found!");
        return;
      }

      populateIconGrid(runtimeIconData, elements.iconGrid);
      applyInitialVisualState(runtimeIconData, elements.iconGrid);
      updateUserInfoPanel(currentUserData, runtimeIconData, elements);
      clearDetailsPanel(elements);


      if (elements.iconGrid) {
        elements.iconGrid.addEventListener('click', function(event) {

          var clickedIconDiv = event.target.closest('.icon');
          if (!clickedIconDiv) return;


          var iconName = clickedIconDiv.dataset.iconName;
          var data = runtimeIconData[iconName];


          if (!data) {
            console.warn("No runtime data found for icon name:", iconName);
            clearDetailsPanel(elements);
            if (currentlySelectedIconDiv) currentlySelectedIconDiv.classList.remove('icon-selected');
            currentlySelectedIconDiv = null;
            if (elements.detailsActionsContainer) elements.detailsActionsContainer.textContent = '';
            return;
          }


          if (currentlySelectedIconDiv) {
            currentlySelectedIconDiv.classList.remove('icon-selected');
          }

          if (data.owned) {
            clickedIconDiv.classList.add('icon-selected');
            currentlySelectedIconDiv = clickedIconDiv;
          } else {
            currentlySelectedIconDiv = null;
          }


          var rarityName = data.rarity || 'Common';
          var rarityClass = getRarityClass(rarityName);
          var isOwned = data.owned;


          var detailsBorderStyleClass = 'details-border-common-hover';
          if (rarityName === 'Blooby') detailsBorderStyleClass = 'details-border-blooby-hover';
          else if (rarityName === 'Algebraic') detailsBorderStyleClass = 'details-border-algebraic-hover';
          else if (rarityName === 'Legendary') detailsBorderStyleClass = 'details-border-legendary-hover';


          if (elements.iconDetailsSection) elements.iconDetailsSection.classList.remove('is-empty');
          if (elements.detailsIconImg) {
            elements.detailsIconImg.src = data.src;
            elements.detailsIconImg.alt = 'Details: ' + iconName;
            elements.detailsIconImg.className = '';
            elements.detailsIconImg.classList.add(detailsBorderStyleClass);
          }
          if (elements.detailsIconName) elements.detailsIconName.textContent = iconName;
          if (elements.detailsIconRarity) {
            elements.detailsIconRarity.textContent = rarityName;
            elements.detailsIconRarity.className = '';
            elements.detailsIconRarity.classList.add(rarityClass);
            elements.detailsIconRarity.style.display = 'inline-block';
          }


          if (elements.detailsActionsContainer) {
            elements.detailsActionsContainer.innerHTML = '';

            if (isOwned) {

              var currentlyEquipped = (currentUserData.user && currentUserData.user.pfp === iconName);

              if (currentlyEquipped) {

                var unequipButton = document.createElement('button');
                unequipButton.id = 'details-unequip-button';
                unequipButton.textContent = 'Unequip';
                unequipButton.addEventListener('click', function() {
                  handleUnequipIcon(iconName, elements);
                });
                elements.detailsActionsContainer.appendChild(unequipButton);
              } else {

                var useButton = document.createElement('button');
                useButton.id = 'details-use-button';
                useButton.textContent = 'Use Icon';
                useButton.addEventListener('click', function() {

                  handleUseIcon(iconName, data, elements);
                });
                elements.detailsActionsContainer.appendChild(useButton);
              }
            } else {

              if (data.cost !== undefined) {

                var buyButton = document.createElement('button');
                buyButton.id = 'details-buy-button';
                buyButton.textContent = 'Buy (' + data.cost + ' Coins)';


                var userCoins = (currentUserData.player && currentUserData.player.coins != null) ? currentUserData.player.coins : 0;
                if (userCoins < data.cost) {
                  buyButton.disabled = true;
                  buyButton.style.opacity = 0.5;
                  buyButton.textContent = 'Need ' + data.cost + ' Coins';
                  buyButton.style.cursor = 'not-allowed';
                } else {

                  buyButton.addEventListener('click', function() {

                    buyButton.disabled = true;
                    buyButton.textContent = 'Purchasing...';


                    fetch('icons/buy', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ userId: currentUserData._id, iconName: iconName })
                    })
                      .then(function(response) {
                        if (!response.ok) {
                          return response.json().catch(function() {
                            throw new Error('Server error: ' + response.status);
                          })
                            .then(function(errorData) {
                              throw new Error(errorData.message || 'Server error: ' + response.status);
                            });
                        }
                        return response.json();
                      })
                      .then(function(result) {

                        currentUserData.player.coins = result.newCoinTotal;
                        if (!currentUserData.icons) currentUserData.icons = [];
                        if (currentUserData.icons.indexOf(iconName) === -1) currentUserData.icons.push(iconName);


                        if (runtimeIconData[iconName]) {
                          runtimeIconData[iconName].owned = true;
                          delete runtimeIconData[iconName].cost;
                          delete runtimeIconData[iconName].unlock;
                        }


                        if (elements.coinsEl) elements.coinsEl.textContent = result.newCoinTotal.toLocaleString();

                        clickedIconDiv.dataset.owned = "true";
                        var purchasedIconData = runtimeIconData[iconName];
                        var updatedRarityClass = getRarityClass(purchasedIconData ? purchasedIconData.rarity : null);
                        clickedIconDiv.classList.remove('rarity-common', 'rarity-blooby', 'rarity-algebraic', 'rarity-legendary');
                        if (updatedRarityClass) clickedIconDiv.classList.add(updatedRarityClass);

                        if (currentlySelectedIconDiv) currentlySelectedIconDiv.classList.remove('icon-selected');
                        clickedIconDiv.classList.add('icon-selected');
                        currentlySelectedIconDiv = clickedIconDiv;


                        elements.detailsActionsContainer.innerHTML = '';
                        var useButton = document.createElement('button');
                        useButton.id = 'details-use-button';
                        useButton.textContent = 'Use Icon';
                        useButton.addEventListener('click', function() {
                          handleUseIcon(iconName, purchasedIconData, elements);
                        });
                        elements.detailsActionsContainer.appendChild(useButton);

                        alert('Icon purchased successfully!');
                      })
                      .catch(function(error) {
                        console.error('Purchase failed:', error);
                        alert('Purchase failed: ' + error.message);

                        buyButton.disabled = false;
                        var costText = (data && data.cost !== undefined) ? data.cost : '???';
                        buyButton.textContent = 'Buy (' + costText + ' Coins)';
                      });
                  });
                }
                elements.detailsActionsContainer.appendChild(buyButton);
              } else if (data.unlock !== undefined) {

                var unlockText = document.createElement('p');
                unlockText.textContent = 'Unlock: ' + data.unlock;
                unlockText.id = 'details-unlock-text';
                elements.detailsActionsContainer.appendChild(unlockText);
              } else {

                var unavailableText = document.createElement('p');
                unavailableText.id = 'details-unlock-text';
                unavailableText.textContent = "Currently unavailable.";
                elements.detailsActionsContainer.appendChild(unavailableText);
              }
            }
          }
        });
      }


      document.addEventListener('click', function(event) {

        if (elements.iconGrid && elements.iconDetailsSection &&
          !elements.iconGrid.contains(event.target) &&
          !elements.iconDetailsSection.contains(event.target)) {

          if (currentlySelectedIconDiv) {
            currentlySelectedIconDiv.classList.remove('icon-selected');
            currentlySelectedIconDiv = null;
          }

          clearDetailsPanel(elements);
        }
      });

    } catch (error) {

      console.error("Failed to initialize icon selector:", error);
      if (elements.iconGrid) elements.iconGrid.innerHTML = '<p style="color: red; text-align: center;">Error loading user data or icons.</p>';
      if (elements.userInfoPanel) elements.userInfoPanel.innerHTML = '<p style="color: red;">Error loading user info.</p>';
      if (elements.iconDetailsSection) clearDetailsPanel(elements);
    }
  });
</script>
</body>
</html>
